            ) : f.type==='table-list' && Array.isArray(f.columns) ? (
              <div className="space-y-2">
                {f.help && <div className="text-sm text-muted-foreground">{f.help}</div>}
                {(() => {
                  const cols: any[] = f.columns || [];
                  const minRows = Math.max(1, Math.min(20, Number((f as any).minRows || 3)));
                  const rows: any[] = Array.isArray(form[f.id]) ? form[f.id] : [];
                  while (rows.length < minRows) rows.push({});
                  const setRows = (next: any[]) => setForm(prev => ({ ...prev, [f.id]: next }));
                  const onCellChange = (rIdx: number, cId: string, value: any) => {
                    const next = rows.map((r:any, i:number)=> i===rIdx ? { ...r, [cId]: value } : r);
                    setRows(next);
                  };
                  const addRow = () => setRows([...rows, {}]);
                  const removeRow = (idx: number) => setRows(rows.filter((_,i)=>i!==idx));
                  return (
                    <div className="overflow-auto">
                      <table className="w-full text-sm border rounded-md overflow-hidden bg-card">
                        <thead>
                          <tr>
                            {cols.map((c:any) => (
                              <th key={c.id} className="px-3 py-2 bg-[hsl(var(--foreground)/0.06)] text-card-foreground text-left whitespace-nowrap">{c.label}</th>
                            ))}
                            <th className="px-3 py-2 bg-[hsl(var(--foreground)/0.06)] text-card-foreground text-right">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {rows.map((row:any, rIdx:number) => (
                            <tr key={rIdx}>
                              {cols.map((c:any) => (
                                <td key={c.id} className="px-3 py-2 border-t align-top">
                                  {c.type==='date' ? (
                                    <input
                                      type="date"
                                      value={toInputDate(row[c.id])}
                                      onChange={(e)=> { if (!canWrite) return; onCellChange(rIdx, c.id, e.currentTarget.value); }}
                                      className="w-full px-2 py-1.5 rounded bg-card border text-card-foreground focus:ring-2 focus:ring-primary/20 focus:border-input"
                                      disabled={!canWrite}
                                    />
                                  ) : c.type==='number' ? (
                                    <input
                                      type="number"
                                      value={row[c.id] ?? ''}
                                      onChange={(e)=> { if (!canWrite) return; onCellChange(rIdx, c.id, e.currentTarget.value===''? '' : Number(e.currentTarget.value)); }}
                                      className="w-full px-2 py-1.5 rounded bg-card border text-card-foreground focus:ring-2 focus:ring-primary/20 focus:border-input"
                                      disabled={!canWrite}
                                    />
                                  ) : (
                                    <input
                                      type="text"
                                      value={row[c.id] ?? ''}
                                      onChange={(e)=> { if (!canWrite) return; onCellChange(rIdx, c.id, e.currentTarget.value); }}
                                      className="w-full px-2 py-1.5 rounded bg-card border text-card-foreground focus:ring-2 focus:ring-primary/20 focus:border-input"
                                      disabled={!canWrite}
                                    />
                                  )}
                                </td>
                              ))}
                              <td className="px-3 py-2 border-t text-right whitespace-nowrap">
                                <button
                                  type="button"
                                  onClick={()=> { if (!canWrite) return; removeRow(rIdx); }}
                                  disabled={!canWrite || rows.length<=1}
                                  className="inline-flex items-center h-8 px-2 text-xs rounded border bg-card hover:bg-[hsl(var(--foreground)/0.06)] disabled:opacity-50 disabled:cursor-not-allowed"
                                >Remove</button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                      <div className="mt-2">
                        <button type="button" onClick={()=> { if (!canWrite) return; addRow(); }} disabled={!canWrite}
                          className="inline-flex items-center h-9 px-3 rounded-md border bg-card hover:bg-[hsl(var(--foreground)/0.06)] disabled:opacity-50">
                          Add row
                        </button>
                      </div>
                    </div>
                  );
                })()}
              </div>
