"use client";
import Breadcrumb from './Breadcrumb';

import React, { useState, useEffect, useMemo } from 'react';
import { api } from '../services/api';
import Link from 'next/link';
import UsersTable from './UsersTable';
import { useToast } from '../components/ToastProvider';
import CreateAssessmentModal from './assessments/CreateAssessmentModal';
import { getAssessments, AssessmentSummary, updateAssessment, archiveAssessment, getArchivedAssessments, unarchiveAssessment, BoardColumn } from '../services/assessments';

interface User {
  id: string;
  email: string;
  name: string;
  role: string;
}

interface AuthenticatedDashboardProps {
  user: User;
  onLogout: () => void;
}

const AuthenticatedDashboard: React.FC<AuthenticatedDashboardProps> = ({ user, onLogout }) => {
  const { showToast } = useToast();
  const [dashboardData, setDashboardData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [assessments, setAssessments] = useState<AssessmentSummary[]>([]);
  const [openCreate, setOpenCreate] = useState(false);
  const [statusFilter, setStatusFilter] = useState<'all'|'backlog'|'inprogress'|'review'|'finished'>('all');
  const [query, setQuery] = useState('');
  const filteredAssessments = useMemo(() =>
    assessments.filter(a =>
      (statusFilter === 'all' || a.col === statusFilter) &&
      (query.trim() === '' ||
        a.title.toLowerCase().includes(query.toLowerCase()) ||
        a.id.toLowerCase().includes(query.toLowerCase()))
    ),
    [assessments, statusFilter, query]
  );

  const [archivedAssessments, setArchivedAssessments] = useState<AssessmentSummary[]>([]);
  const [showArchived, setShowArchived] = useState(false);
  const [editingId, setEditingId] = useState<string | null>(null);
  const [editTitle, setEditTitle] = useState('');
  const [editCol, setEditCol] = useState<BoardColumn>('backlog');
  const [editDueIn, setEditDueIn] = useState('');
  const [selectedRecent, setSelectedRecent] = useState<Record<string, boolean>>({});
  const selectedRecentIds = useMemo(()=> (filteredAssessments||[]).slice(0,6).filter(a=> selectedRecent[a.id]).map(a=> a.id), [filteredAssessments, selectedRecent]);
  const [selectedArchived, setSelectedArchived] = useState<Record<string, boolean>>({});
  const selectedArchivedIds = useMemo(()=> (archivedAssessments||[]).filter(a=> selectedArchived[a.id]).map(a=> a.id), [archivedAssessments, selectedArchived]);


  useEffect(() => {
    let alive = true;
    (async () => {
      setLoading(true);
      setError(null);
      try {
        const [dashResp, asses] = await Promise.all([
          api.getDashboardData(),
          getAssessments(),
        ]);
        if (!alive) return;
        if (!dashResp.success || !dashResp.data) {
          throw new Error(dashResp.message || 'Failed to load dashboard');
        }
        setDashboardData(dashResp.data);
        setAssessments(asses);
      } catch (e: any) {
        const msg = e?.message || 'Failed to load dashboard';
        setError(msg);
      } finally {
        if (alive) setLoading(false)
      }
    })()
    return () => { alive = false }
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen bg-background">
        <header className="bg-background border-b h-[88px]"></header>
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {Array.from({length:4}).map((_,i)=> (
              <div key={i} className="bg-card rounded-lg p-6 border animate-pulse">
                <div className="h-6 bg-muted rounded w-1/3"></div>
                <div className="h-8 bg-muted rounded w-1/2 mt-3"></div>
              </div>
            ))}
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="bg-card rounded-lg p-6 border animate-pulse h-64"></div>
            <div className="bg-card rounded-lg p-6 border animate-pulse h-64"></div>
          </div>
        </main>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-background grid place-items-center">
        <div className="text-center text-destructive">{error}</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
<header className="bg-background border-b">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div className="py-4">
      <Breadcrumb items={[{ label: 'Home', href: '/' }, { label: 'Dashboard' }]} />
    </div>
  </div>
</header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-card rounded-lg p-6 border">
            <div className="flex items-center">
              <div className="p-2 bg-primary rounded-lg">
                <div className="w-6 h-6 bg-primary/20 rounded"></div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-muted-foreground">Total Controls</p>
                <p className="text-2xl font-semibold text-card-foreground">{dashboardData.stats.totalControls}</p>
              </div>
            </div>
          </div>

          <div className="bg-card rounded-lg p-6 border">
            <div className="flex items-center">
              <div className="p-2 bg-green-600 rounded-lg">
                <div className="w-6 h-6 bg-green-600/20 rounded"></div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-muted-foreground">Completed</p>
                <p className="text-2xl font-semibold text-card-foreground">{dashboardData.stats.completedControls}</p>
              </div>
            </div>
          </div>

          <div className="bg-card rounded-lg p-6 border">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-600 rounded-lg">
                <div className="w-6 h-6 bg-yellow-600/20 rounded"></div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-muted-foreground">Pending Evidence</p>
                <p className="text-2xl font-semibold text-card-foreground">{dashboardData.stats.pendingEvidences}</p>
              </div>
            </div>
          </div>

          <div className="bg-card rounded-lg p-6 border">
            <div className="flex items-center">
              <div className="p-2 bg-purple-600 rounded-lg">
                <div className="w-6 h-6 bg-purple-100 rounded"></div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-muted-foreground">Upcoming Audits</p>
                <p className="text-2xl font-semibold text-card-foreground">{dashboardData.stats.upcomingAudits}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Recent Activity */}
          <div className="bg-card rounded-lg p-6 border">
            <h3 className="text-lg font-semibold text-card-foreground mb-4">Recent Activity</h3>
            <div className="space-y-4">
              {dashboardData.recentActivity.map((activity: any) => (
                <div key={activity.id} className="flex items-start space-x-3">
                  <div className="flex-shrink-0">
                    <div className="w-2 h-2 bg-primary rounded-full mt-2"></div>
                  </div>
                  <div className="flex-1">
                    <p className="text-sm text-card-foreground">{activity.description}</p>
                    <p className="text-xs text-muted-foreground">{activity.timestamp} â€¢ {activity.user}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Profile Information */}
          <div className="bg-card rounded-lg p-6 border">
            <h3 className="text-lg font-semibold text-card-foreground mb-4">Profile Information</h3>
            <div className="space-y-4">
              <div>
                <p className="text-sm text-muted-foreground">Name</p>
                <p className="text-card-foreground">{user.name}</p>
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Email</p>
                <p className="text-card-foreground">{user.email}</p>
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Role</p>
                <span className="badge tone-review">
                  {user.role}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Progress Section */}
        <div className="mt-8">
          <div className="bg-card rounded-lg p-6 border">
            <h3 className="text-lg font-semibold text-card-foreground mb-6">Compliance Progress</h3>
            <div className="space-y-6">
              <div>
                <div className="flex justify-between text-sm text-muted-foreground mb-2">
                  <span>Overall Compliance</span>
                  <span>91%</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-gradient-to-r from-green-500 to-blue-500 h-2 rounded-full" style={{width: '91%'}}></div>
                </div>
              </div>
              <div>
                <div className="flex justify-between text-sm text-muted-foreground mb-2">
                  <span>Documentation</span>
                  <span>87%</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full" style={{width: '87%'}}></div>
                </div>
              </div>
            </div>
          </div>
        </div>
              
        
        <section className="mt-10">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-card-foreground">Assessments Overview</h3>
            <div className="flex items-center gap-3">
              <span className="text-xs text-muted-foreground hidden sm:inline">Summary</span>
              <button onClick={()=>setOpenCreate(true)} className="px-3 py-1.5 bg-primary hover:brightness-110 text-primary-foreground rounded text-sm">+ Create Assessment</button>
            </div>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            {(() => {
              const counts: Record<string, number> = { backlog: 0, inprogress: 0, review: 0, finished: 0 };
              assessments.forEach(a => { counts[a.col] = (counts[a.col] || 0) + 1; });
              const cards = [
                { key: 'backlog', label: 'Backlog' },
                { key: 'inprogress', label: 'In Progress' },
                { key: 'review', label: 'In Review' },
                { key: 'finished', label: 'Finished' },
              ] as const;
              return cards.map(c => (
                <div key={c.key} className="bg-card rounded-lg p-4 border">
                  <div className="text-sm text-muted-foreground">{c.label}</div>
                  <div className="mt-1 text-2xl font-semibold text-card-foreground">{counts[c.key] || 0}</div>
                </div>
              ));
            })()}
          </div>

          <div className="bg-card rounded-lg border">
            <div className="p-4 border-b flex items-center justify-between">
              <div className="text-card-foreground font-semibold">Recent Assessments</div>
              <Link href="/assessments" className="text-sm text-primary hover:brightness-110">View all</Link>
            </div>
            <div className="px-4 py-3 flex flex-col sm:flex-row sm:items-center gap-3">
              <div className="flex items-center gap-2">
                {(['all', 'backlog', 'inprogress', 'review', 'finished'] as const).map(k => (
                  <button key={k} onClick={()=>setStatusFilter(k)} className={`px-2.5 py-1 rounded text-xs border ${statusFilter===k ? 'bg-accent text-foreground border' : 'text-muted-foreground border hover:brightness-110'}`}>{k}</button>
                ))}
              </div>
              <div className="flex-1" />
              <div className="relative sm:w-64">
                <input value={query} onChange={(e)=>setQuery(e.target.value)} placeholder="Search by title or ID" className="w-full px-3 py-2 rounded bg-card border text-card-foreground placeholder-muted-foreground" />
              </div>
            </div>
            <div className="px-4 text-xs text-muted-foreground">Showing {filteredAssessments.length} of {assessments.length}</div>

            <div className="px-4 py-2 flex items-center gap-2">
              <span className="text-xs text-muted-foreground">Selected: {selectedRecentIds.length}</span>
              <button onClick={()=>{ const next: Record<string, boolean> = {}; filteredAssessments.slice(0,6).forEach(a=> next[a.id]=true); setSelectedRecent(next); }} className="text-xs px-2 py-1 bg-secondary text-foreground rounded border">Select all</button>
              <button onClick={()=> setSelectedRecent({})} className="text-xs px-2 py-1 bg-secondary text-foreground rounded border">Clear</button>
              <button disabled={!selectedRecentIds.length} onClick={async ()=>{ if (!window.confirm('Archive ' + selectedRecentIds.length + ' selected?')) return; let ok=0,fail=0; for (const id of selectedRecentIds){ try { await archiveAssessment(id); ok++; } catch { fail++; } } setAssessments(prev=> prev.filter(x=> selectedRecentIds.indexOf(x.id)===-1)); setSelectedRecent({}); showToast('Archived ' + ok + (fail?(' ('+fail+' failed)'):'') , fail?'error':'success'); }} className="text-xs px-2 py-1 bg-destructive text-destructive-foreground rounded border disabled:opacity-50">Archive selected</button>
            </div>

            <div className="divide-y">
              {filteredAssessments.slice(0,6).map(a => {
                const tone = a.col === "finished" ? "bg-green-500/15 text-green-300 border-green-500/30"
                  : a.col === "review" ? "bg-yellow-500/15 text-yellow-300 border-yellow-500/30"
                  : a.col === "inprogress" ? "bg-blue-500/15 text-blue-300 border-blue-500/30"
                  : "bg-gray-500/15 text-muted-foreground border-gray-500/30";
                return (
                  <div key={a.id} className="flex items-center justify-between px-4 py-3 hover:bg-accent/40">
                    <div className="flex items-center gap-3">
                      <span className={`text-[10px] px-2 py-0.5 rounded-full border ${tone}`}>{a.col}</span>
                      <div>
                        {editingId === a.id ? (
                          <div className="flex items-center gap-2">
                            <input value={editTitle} onChange={(e)=>setEditTitle(e.target.value)} className="px-2 py-1 rounded bg-card border text-card-foreground text-sm" />
                            <select value={editCol} onChange={(e)=>setEditCol(e.target.value as BoardColumn)} className="px-2 py-1 rounded bg-card border text-card-foreground text-sm">
                              <option value="backlog">backlog</option>
                              <option value="inprogress">inprogress</option>
                              <option value="review">review</option>
                              <option value="finished">finished</option>
                            </select>
                            <input value={editDueIn} onChange={(e)=>setEditDueIn(e.target.value)} placeholder="Due in" className="px-2 py-1 rounded bg-card border text-card-foreground text-sm" />
                          </div>
                        ) : (
                          <a href={`/assessments/${a.id}`}>
                            <div className="text-card-foreground">{a.title}</div>
                            <div className="text-xs text-muted-foreground">{a.id}</div>
                          </a>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="text-xs text-muted-foreground">Due: <span className="text-destructive/80">{editingId === a.id ? editDueIn : a.dueIn}</span></div>
                      {editingId === a.id ? (
                        <>
                          <button className="text-xs px-2 py-1 bg-green-700 text-white rounded border border-green-600" onClick={async ()=>{
                            try {
                            const updated = await updateAssessment(a.id, { title: editTitle, col: editCol, dueIn: editDueIn || a.dueIn });
                            setAssessments(prev => prev.map(x => x.id===a.id ? updated : x));
                            setEditingId(null);
                            showToast('Assessment updated','success');
                          } catch (e: any) { showToast(e?.message || 'Failed to update','error'); }
                          }}>Save</button>
                          <button className="text-xs px-2 py-1 bg-secondary text-foreground rounded border" onClick={()=>setEditingId(null)}>Cancel</button>
                        </>
                      ) : (
                        <>
                          <button className="text-xs px-2 py-1 bg-secondary text-foreground rounded border" onClick={()=>{ setEditingId(a.id); setEditTitle(a.title); setEditCol(a.col as BoardColumn); setEditDueIn(a.dueIn); }}>Edit</button>
                          <button className="text-xs px-2 py-1 bg-destructive text-destructive-foreground rounded border" onClick={async ()=>{
                            if (!window.confirm('Archive this assessment?')) return;
                            try {
                              await archiveAssessment(a.id);
                              setAssessments(prev => prev.filter(x => x.id!==a.id));
                              showToast('Archived','success');
                            } catch (e: any) { showToast(e?.message || 'Failed to archive','error'); }
                          }}>Archive</button>
                        </>
                      )}
                    </div>
                  </div>
                );
              })}
              {assessments.length === 0 && (
                <div className="px-4 py-6 text-sm text-muted-foreground">No assessments found</div>
              )}
            </div>
          </div>
        </section>
        

        

        <section className="mt-10">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-card-foreground">Archived Assessments</h3>
            <div className="flex items-center gap-3">
              <label className="text-xs text-muted-foreground">Show</label>
              <input type="checkbox" checked={showArchived} onChange={(e)=>setShowArchived(e.target.checked)} />
            </div>
          </div>
          {showArchived && (

            <div className="bg-card rounded-lg border">
              <div className="px-4 py-2 flex items-center gap-2">
                <span className="text-xs text-muted-foreground">Selected: {selectedArchivedIds.length}</span>
                <button onClick={()=>{ const next: Record<string, boolean> = {}; archivedAssessments.forEach(a=> next[a.id]=true); setSelectedArchived(next); }} className="text-xs px-2 py-1 bg-secondary text-foreground rounded border">Select all</button>
                <button onClick={()=> setSelectedArchived({})} className="text-xs px-2 py-1 bg-secondary text-foreground rounded border">Clear</button>
                <button disabled={!selectedArchivedIds.length} onClick={async ()=>{ if (!window.confirm('Unarchive ' + selectedArchivedIds.length + ' selected?')) return; let ok=0,fail=0; for (const id of selectedArchivedIds){ try { const restored = await unarchiveAssessment(id); setAssessments(prev=> [restored, ...prev]); ok++; } catch { fail++; } } setArchivedAssessments(prev=> prev.filter(x=> selectedArchivedIds.indexOf(x.id)===-1)); setSelectedArchived({}); showToast('Unarchived ' + ok + (fail?(' ('+fail+' failed)'):'') , fail?'error':'success'); }} className="text-xs px-2 py-1 bg-primary text-primary-foreground rounded border disabled:opacity-50">Unarchive selected</button>
              </div>
              <div className="divide-y">
                {archivedAssessments.length === 0 && (
                  <div className="px-4 py-6 text-sm text-muted-foreground">No archived assessments</div>
                )}
                {archivedAssessments.map(a => (
                  <div key={a.id} className="flex items-center justify-between px-4 py-3">
                    <div>
                      <div className="text-card-foreground">{a.title}</div>
                      <div className="text-xs text-muted-foreground">{a.id} â€¢ {a.col}</div>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="text-xs text-muted-foreground">Due: <span className="text-destructive/80">{a.dueIn}</span></div>
                      <button className="text-xs px-2 py-1 bg-secondary text-foreground rounded border" onClick={async ()=>{
                        try {
                        const restored = await unarchiveAssessment(a.id);
                        setArchivedAssessments(prev => prev.filter(x => x.id !== a.id));
                        setAssessments(prev => [restored, ...prev]);
                        showToast('Unarchived','success');
                      } catch (e: any) { showToast(e?.message || 'Failed to unarchive','error'); }
                      }}>Unarchive</button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </section>

        <section className="mt-10">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-card-foreground">User Management</h3>
          </div>
          <div className="space-y-4">
            <UsersTable />
          </div>
        </section>

        <CreateAssessmentModal
          open={openCreate}
          onClose={()=>setOpenCreate(false)}
          onCreate={async ({ title, col, dueIn }) => {
            const created = await (await import('../services/assessments')).createAssessment({ title, col, dueIn });
            setAssessments(prev => [created, ...prev]);
          }}
        />
      </main>
    </div>
  );
};

export default AuthenticatedDashboard;
